import React, { useState } from 'react'
import { Key, Copy, Eye, EyeOff, Plus, LogIn } from 'lucide-react'
import { LoadingSpinner } from './ui/LoadingSpinner'
import { supabase, generateApiKey, validateApiKey } from '@/lib/supabase'

export function AuthForm() {
  const [mode, setMode] = useState<'login' | 'register' | 'generated'>('login')
  const [apiKey, setApiKey] = useState('')
  const [generatedKey, setGeneratedKey] = useState('')
  const [showKey, setShowKey] = useState(false)
  const [loading, setLoading] = useState(false)
  const [error, setError] = useState('')
  const [copied, setCopied] = useState(false)

  const handleGenerateKey = async () => {
    setLoading(true)
    setError('')

    try {
      const newApiKey = generateApiKey()
      const userId = crypto.randomUUID()
      
      const { data: user, error } = await supabase
        .from('users')
        .insert([
          {
            user_id: userId,
            api_key: newApiKey,
            name: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'
          }
        ])
        .select()
        .single()

      if (error) {
        if (error.code === '23505') {
          setError('–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ - –∫–ª—é—á —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç')
          return
        }
        throw error
      }

      setGeneratedKey(newApiKey)
      setMode('generated')
    } catch (err) {
      setError('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–ª—é—á–∞: ' + (err as Error).message)
      console.error(err)
    } finally {
      setLoading(false)
    }
  }

  const handleLogin = async () => {
    if (!validateApiKey(apiKey)) {
      setError('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç API-–∫–ª—é—á–∞. –ö–ª—é—á –¥–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å "tk_"')
      return
    }

    setLoading(true)
    setError('')

    try {
      const { data: user, error } = await supabase
        .from('users')
        .select('*')
        .eq('api_key', apiKey)
        .single()

      if (error || !user) {
        setError('API-–∫–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω')
        return
      }

      // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
      await supabase
        .from('users')
        .update({ last_active: new Date().toISOString() })
        .eq('id', user.id)

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–ª—é—á
      localStorage.setItem('tracker_api_key', apiKey)
      
      // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É
      window.location.reload()

    } catch (err) {
      setError('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: ' + (err as Error).message)
      console.error(err)
    } finally {
      setLoading(false)
    }
  }

  const copyToClipboard = async (text: string) => {
    try {
      await navigator.clipboard.writeText(text)
      setCopied(true)
      setTimeout(() => setCopied(false), 2000)
    } catch (err) {
      console.error('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å:', err)
    }
  }

  const continueToLogin = () => {
    setApiKey(generatedKey)
    setMode('login')
    setGeneratedKey('')
  }

  // –≠–∫—Ä–∞–Ω —Å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –∫–ª—é—á–æ–º
  if (mode === 'generated') {
    return (
      <div className="min-h-screen flex items-center justify-center bg-gray-50 py-12 px-4 sm:px-6 lg:px-8">
        <div className="max-w-md w-full space-y-8">
          <div className="text-center">
            <Key className="h-16 w-16 text-blue-600 mx-auto mb-4" />
            <h2 className="text-3xl font-extrabold text-gray-900">
              –í–∞—à –∫–ª—é—á –≥–æ—Ç–æ–≤!
            </h2>
            <p className="mt-2 text-gray-600">
              –°–æ—Ö—Ä–∞–Ω–∏—Ç–µ —ç—Ç–æ—Ç –∫–ª—é—á –¥–ª—è –≤—Ö–æ–¥–∞ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
            </p>
          </div>

          <div className="space-y-4">
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">
                API-–∫–ª—é—á:
              </label>
              <div className="relative">
                <input
                  type={showKey ? 'text' : 'password'}
                  value={generatedKey}
                  readOnly
                  className="w-full px-3 py-3 border border-gray-300 rounded-md bg-gray-50 font-mono text-sm focus:outline-none"
                />
                <div className="absolute right-2 top-1/2 transform -translate-y-1/2 flex space-x-1">
                  <button
                    onClick={() => setShowKey(!showKey)}
                    className="p-1 text-gray-500 hover:text-gray-700 transition-colors"
                  >
                    {showKey ? <EyeOff size={16} /> : <Eye size={16} />}
                  </button>
                  <button
                    onClick={() => copyToClipboard(generatedKey)}
                    className="p-1 text-gray-500 hover:text-gray-700 transition-colors"
                  >
                    <Copy size={16} />
                  </button>
                </div>
              </div>
              {copied && (
                <p className="text-green-600 text-sm mt-1">‚úÖ –°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ!</p>
              )}
            </div>

            <div className="bg-yellow-50 border border-yellow-200 rounded-md p-4">
              <p className="text-yellow-800 text-sm">
                <strong>–í–∞–∂–Ω–æ:</strong> –°–æ—Ö—Ä–∞–Ω–∏—Ç–µ —ç—Ç–æ—Ç –∫–ª—é—á! –û–Ω –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è –¥–ª—è –≤—Ö–æ–¥–∞.
              </p>
            </div>

            <button
              onClick={continueToLogin}
              className="w-full flex justify-center py-3 px-4 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 transition-colors"
            >
              –í–æ–π—Ç–∏ —Å —ç—Ç–∏–º –∫–ª—é—á–æ–º
            </button>

            <button
              onClick={() => {
                setMode('login')
                setGeneratedKey('')
                setApiKey('')
              }}
              className="w-full flex justify-center py-2 px-4 border border-gray-300 rounded-md shadow-sm text-sm font-medium text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 transition-colors"
            >
              –£ –º–µ–Ω—è –µ—Å—Ç—å –¥—Ä—É–≥–æ–π –∫–ª—é—á
            </button>
          </div>
        </div>
      </div>
    )
  }

  // –û—Å–Ω–æ–≤–Ω–∞—è —Ñ–æ—Ä–º–∞
  return (
    <div className="min-h-screen flex items-center justify-center bg-gray-50 py-12 px-4 sm:px-6 lg:px-8">
      <div className="max-w-md w-full space-y-8">
        <div className="text-center">
          <Key className="h-16 w-16 text-blue-600 mx-auto mb-4" />
          <h2 className="text-3xl font-extrabold text-gray-900">
            üìã –¢—Ä–µ–∫–µ—Ä –∑–∞–¥–∞—á
          </h2>
          <h3 className="mt-2 text-xl text-gray-600">
            {mode === 'login' 
              ? '–í–æ–π–¥–∏—Ç–µ —Å –ø–æ–º–æ—â—å—é API-–∫–ª—é—á–∞' 
              : '–ü–æ–ª—É—á–∏—Ç–µ –Ω–æ–≤—ã–π –∫–ª—é—á'
            }
          </h3>
        </div>

        {error && (
          <div className="bg-red-50 border border-red-200 rounded-md p-3">
            <p className="text-red-800 text-sm">{error}</p>
          </div>
        )}

        {mode === 'login' ? (
          <div className="space-y-6">
            <div>
              <label htmlFor="apikey" className="block text-sm font-medium text-gray-700 mb-2">
                –í–≤–µ–¥–∏—Ç–µ –≤–∞—à API-–∫–ª—é—á
              </label>
              <div className="relative">
                <input
                  id="apikey"
                  type="password"
                  value={apiKey}
                  onChange={(e) => setApiKey(e.target.value)}
                  placeholder="tk_xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"
                  className="w-full px-3 py-3 pl-10 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500 font-mono text-sm"
                  disabled={loading}
                />
                <Key className="h-5 w-5 text-gray-400 absolute left-3 top-1/2 transform -translate-y-1/2" />
              </div>
              <p className="text-xs text-gray-500 mt-1">
                API-–∫–ª—é—á –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å <code className="bg-gray-100 px-1 rounded">tk_</code>
              </p>
            </div>

            <button
              onClick={handleLogin}
              disabled={loading || !apiKey}
              className="w-full flex justify-center py-3 px-4 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 disabled:opacity-50 disabled:cursor-not-allowed transition-colors"
            >
              {loading ? <LoadingSpinner /> : (
                <>
                  <LogIn className="h-4 w-4 mr-2" />
                  –í–æ–π—Ç–∏
                </>
              )}
            </button>

            <div className="text-center">
              <button
                type="button"
                onClick={() => setMode('register')}
                className="text-blue-600 hover:text-blue-500 text-sm font-medium"
              >
                –ù–µ—Ç –∫–ª—é—á–∞? –ü–æ–ª—É—á–∏—Ç—å –Ω–æ–≤—ã–π
              </button>
            </div>
          </div>
        ) : (
          <div className="space-y-6">
            <div className="bg-blue-50 border border-blue-200 rounded-md p-4">
              <p className="text-blue-800 text-sm">
                –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω—ã–π API-–∫–ª—é—á –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –≤–∞—à–∏–º –∑–∞–¥–∞—á–∞–º.
              </p>
            </div>

            <button
              onClick={handleGenerateKey}
              disabled={loading}
              className="w-full flex justify-center py-3 px-4 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-green-600 hover:bg-green-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-green-500 disabled:opacity-50 disabled:cursor-not-allowed transition-colors"
            >
              {loading ? <LoadingSpinner /> : (
                <>
                  <Plus className="h-4 w-4 mr-2" />
                  –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –∫–ª—é—á
                </>
              )}
            </button>

            <div className="text-center">
              <button
                type="button"
                onClick={() => setMode('login')}
                className="text-blue-600 hover:text-blue-500 text-sm font-medium"
              >
                –£–∂–µ –µ—Å—Ç—å –∫–ª—é—á? –í–æ–π—Ç–∏
              </button>
            </div>
          </div>
        )}
        
        <div className="text-center text-xs text-gray-500 mt-4">
          –í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –Ω–∞–¥–µ–∂–Ω–æ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –≤ –æ–±–ª–∞–∫–µ
        </div>
      </div>
    </div>
  )
}
