import React, { useCallback } from 'react'
import { useAppStore } from '../../store'
import { useDatabase } from '../../hooks/useDatabase'
import { AddTaskForm } from '../AddTaskForm'
import { TaskItem } from '../TaskItem'
import { ProgressBar } from '../ProgressBar'
import { DateNavigation } from '../DateNavigation'
import { Task, RecurringTask } from '../../lib/database'

export function TodayView() {
  const { tasks, recurringTasks, selectedDate, taskCompletions, setTasks } = useAppStore()
  const { updateTask, deleteTask, addTaskCompletion, removeTaskCompletion } = useDatabase()

  // –ü–æ–ª—É—á–∞–µ–º –æ–±—ã—á–Ω—ã–µ –∑–∞–¥–∞—á–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è (–æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ)
  const todayTasks = tasks
    .filter(task => task.category === 'today' && task.date === selectedDate)
    .sort((a, b) => a.order_index - b.order_index)

  // –ü–æ–ª—É—á–∞–µ–º —Ä–µ–≥—É–ª—è—Ä–Ω—ã–µ –∑–∞–¥–∞—á–∏ –¥–ª—è —Å–µ–≥–æ–¥–Ω—è (–æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ –ø–æ—Ä—è–¥–∫—É –∏–∑ –≤–∫–ª–∞–¥–∫–∏ "–†–µ–≥—É–ª—è—Ä–Ω—ã–µ")
  const todayRecurringTasks = recurringTasks
    .filter(recurringTask => {
      if (recurringTask.frequency === 'daily') return true
      if (recurringTask.frequency === 'weekly' && recurringTask.days_of_week) {
        const dayOfWeek = new Date(selectedDate).getDay()
        return recurringTask.days_of_week.includes(dayOfWeek)
      }
      return false
    })
    .sort((a, b) => {
      // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ order_index –µ—Å–ª–∏ –µ—Å—Ç—å, –∏–Ω–∞—á–µ –ø–æ –¥–∞—Ç–µ —Å–æ–∑–¥–∞–Ω–∏—è
      const aOrder = 'order_index' in a ? a.order_index : 0
      const bOrder = 'order_index' in b ? b.order_index : 0
      return aOrder - bOrder
    })
    .map(rt => ({
      ...rt,
      isRecurring: true as const,
      completed: taskCompletions.some(tc => 
        tc.recurring_task_id === rt.id && tc.date === selectedDate
      ),
      category: 'today' as const,
      date: selectedDate,
    }))

  // –ü–æ–¥—Å—á–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
  const totalTasks = todayTasks.length + todayRecurringTasks.length
  const completedTasks = todayTasks.filter(t => t.completed).length + todayRecurringTasks.filter(t => t.completed).length
  const progress = totalTasks > 0 ? (completedTasks / totalTasks) * 100 : 0

  const handleToggleTask = useCallback(async (taskId: string) => {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —ç—Ç–æ —Ä–µ–≥—É–ª—è—Ä–Ω–∞—è –∑–∞–¥–∞—á–∞ –∏–ª–∏ –æ–±—ã—á–Ω–∞—è
    const regularTask = todayRecurringTasks.find(t => t.id === taskId)
    if (regularTask) {
      // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –†–µ–≥—É–ª—è—Ä–Ω–∞—è –∑–∞–¥–∞—á–∞
      if (regularTask.completed) {
        // –£–¥–∞–ª—è–µ–º completion –¥–ª—è —Ä–µ–≥—É–ª—è—Ä–Ω–æ–π –∑–∞–¥–∞—á–∏
        await removeTaskCompletion(null, taskId, selectedDate)
      } else {
        // –î–æ–±–∞–≤–ª—è–µ–º completion –¥–ª—è —Ä–µ–≥—É–ª—è—Ä–Ω–æ–π –∑–∞–¥–∞—á–∏
        await addTaskCompletion(null, taskId, selectedDate)
      }
    } else {
      // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –û–±—ã—á–Ω–∞—è –∑–∞–¥–∞—á–∞
      const task = todayTasks.find(t => t.id === taskId)
      if (task) {
        if (task.completed) {
          // –£–¥–∞–ª—è–µ–º completion –¥–ª—è –æ–±—ã—á–Ω–æ–π –∑–∞–¥–∞—á–∏
          await removeTaskCompletion(taskId, null, selectedDate)
        } else {
          // –î–æ–±–∞–≤–ª—è–µ–º completion –¥–ª—è –æ–±—ã—á–Ω–æ–π –∑–∞–¥–∞—á–∏
          await addTaskCompletion(taskId, null, selectedDate)
        }
        // –¢–∞–∫–∂–µ –æ–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª–µ completed –≤ —Å–∞–º–æ–π –∑–∞–¥–∞—á–µ
        await updateTask(taskId, { completed: !task.completed })
      }
    }
  }, [todayTasks, todayRecurringTasks, selectedDate, updateTask, addTaskCompletion, removeTaskCompletion])

  const handleDeleteTask = useCallback(async (taskId: string) => {
    await deleteTask(taskId)
  }, [deleteTask])

  // –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è –∑–∞–¥–∞—á
  const handleMoveTaskUp = useCallback(async (taskId: string) => {
    const taskIndex = todayTasks.findIndex(t => t.id === taskId)
    if (taskIndex <= 0) return

    const task = todayTasks[taskIndex]
    const prevTask = todayTasks[taskIndex - 1]

    // –ú–µ–Ω—è–µ–º order_index –º–µ—Å—Ç–∞–º–∏
    await Promise.all([
      updateTask(task.id, { order_index: prevTask.order_index }),
      updateTask(prevTask.id, { order_index: task.order_index })
    ])

    console.log(`Moved task ${taskId} up`)
  }, [todayTasks, updateTask])

  const handleMoveTaskDown = useCallback(async (taskId: string) => {
    const taskIndex = todayTasks.findIndex(t => t.id === taskId)
    if (taskIndex >= todayTasks.length - 1) return

    const task = todayTasks[taskIndex]
    const nextTask = todayTasks[taskIndex + 1]

    // –ú–µ–Ω—è–µ–º order_index –º–µ—Å—Ç–∞–º–∏
    await Promise.all([
      updateTask(task.id, { order_index: nextTask.order_index }),
      updateTask(nextTask.id, { order_index: task.order_index })
    ])

    console.log(`Moved task ${taskId} down`)
  }, [todayTasks, updateTask])

  return (
    <div className="space-y-6">
      <DateNavigation />
      
      <ProgressBar 
        completed={completedTasks} 
        total={totalTasks} 
        progress={progress} 
      />

      <div className="space-y-6">
        <h2 className="text-xl font-bold text-gray-900">
          –ó–∞–¥–∞—á–∏ –Ω–∞ {new Date(selectedDate).toLocaleDateString('ru-RU', { 
            day: 'numeric', 
            month: 'long' 
          })}
        </h2>

        {/* –†–µ–≥—É–ª—è—Ä–Ω—ã–µ –∑–∞–¥–∞—á–∏ (–∑–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã–µ —Å–≤–µ—Ä—Ö—É) */}
        {todayRecurringTasks.length > 0 && (
          <div className="space-y-4">
            <div className="flex items-center gap-2">
              <h3 className="text-lg font-semibold text-gray-800">üîÑ –†–µ–≥—É–ª—è—Ä–Ω—ã–µ –∑–∞–¥–∞—á–∏</h3>
              <span className="text-sm text-gray-500 bg-blue-50 px-2 py-1 rounded-full">
                {todayRecurringTasks.length}
              </span>
            </div>
            <div className="space-y-3">
              {todayRecurringTasks.map((task) => (
                <TaskItem
                  key={task.id}
                  task={task}
                  onToggle={handleToggleTask}
                  onDelete={handleDeleteTask}
                  showMoveButtons={false} // –†–µ–≥—É–ª—è—Ä–Ω—ã–µ –∑–∞–¥–∞—á–∏ –Ω–µ –ø–µ—Ä–µ–º–µ—â–∞—é—Ç—Å—è –∑–¥–µ—Å—å
                />
              ))}
            </div>
          </div>
        )}

        {/* –û–±—ã—á–Ω—ã–µ –∑–∞–¥–∞—á–∏ */}
        <div className="space-y-4">
          <div className="flex items-center justify-between">
            <div className="flex items-center gap-2">
              <h3 className="text-lg font-semibold text-gray-800">üìù –ó–∞–¥–∞—á–∏ –Ω–∞ –¥–µ–Ω—å</h3>
              {todayTasks.length > 0 && (
                <span className="text-sm text-gray-500 bg-gray-50 px-2 py-1 rounded-full">
                  {todayTasks.length}
                </span>
              )}
            </div>
          </div>

          <div className="space-y-3">
            {todayTasks.length === 0 ? (
              <div className="text-center py-8 text-gray-500 bg-gray-50 rounded-xl border-2 border-dashed border-gray-200">
                <div className="text-3xl mb-2">üìù</div>
                <p className="text-base font-medium">–ó–∞–¥–∞—á –Ω–∞ –¥–µ–Ω—å –ø–æ–∫–∞ –Ω–µ—Ç</p>
                <p className="text-sm mt-1">–î–æ–±–∞–≤—å—Ç–µ –∑–∞–¥–∞—á–∏, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ –≤—ã–ø–æ–ª–Ω–∏—Ç—å —Å–µ–≥–æ–¥–Ω—è</p>
              </div>
            ) : (
              todayTasks.map((task, index) => (
                <TaskItem
                  key={task.id}
                  task={task}
                  onToggle={handleToggleTask}
                  onDelete={handleDeleteTask}
                  onMoveUp={handleMoveTaskUp}
                  onMoveDown={handleMoveTaskDown}
                  showMoveButtons={todayTasks.length > 1}
                  isFirst={index === 0}
                  isLast={index === todayTasks.length - 1}
                />
              ))
            )}
          </div>
        </div>

        {/* –û–±—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è */}
        {totalTasks === 0 && (
          <div className="text-center py-12 text-gray-500">
            <div className="text-4xl mb-4">‚ú®</div>
            <p className="text-lg font-medium mb-2">–î–µ–Ω—å —Å–≤–æ–±–æ–¥–µ–Ω –æ—Ç –∑–∞–¥–∞—á</p>
            <p className="text-sm">–î–æ–±–∞–≤—å—Ç–µ –∑–∞–¥–∞—á–∏ –∏–ª–∏ –Ω–∞—Å–ª–∞–∂–¥–∞–π—Ç–µ—Å—å –æ—Ç–¥—ã—Ö–æ–º!</p>
          </div>
        )}
      </div>

      <AddTaskForm category="today" placeholder="–î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É –Ω–∞ —Å–µ–≥–æ–¥–Ω—è..." />
    </div>
  )
}
